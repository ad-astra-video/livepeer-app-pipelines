# Use an official Python runtime as a parent image
FROM python:3.11-slim

# Set environment variables
# Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1
# Prevents interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set the working directory in the container
WORKDIR /app

# Copy the dependencies file to the working directory
COPY requirements.txt ./

# Install any needed packages specified in requirements.txt
# --no-cache-dir ensures that pip doesn't store downloaded packages, reducing image size
# It's good practice to log this step for debugging build issues. Docker does this by default.
RUN echo "Starting installation of Python dependencies from requirements.txt" && \
    pip install --no-cache-dir -r requirements.txt && \
    echo "Successfully installed Python dependencies."

# Copy the server.py file into the container at /app
COPY server.py ./

# Create directories for outputs and checkpoints, if the application uses them
# This aligns with common patterns seen in docker-compose volume mounts.
RUN echo "Creating /outputs and /checkpoints directories" && \
    mkdir -p /outputs /checkpoints && \
    echo "Directories /outputs and /checkpoints created."

# Make port 9876 available to the world outside this container
# Default port, can be overridden at runtime.
ARG SERVER_PORT=9876
ENV SERVER_PORT=${SERVER_PORT}
EXPOSE ${SERVER_PORT}

# Define environment variable for logging/debugging (optional, example)
ENV APP_LOG_LEVEL INFO

# Run server.py when the container launches
# The -u flag is equivalent to PYTHONUNBUFFERED=1 for unbuffered output, ensuring logs are visible.
CMD ["python", "-u", "server.py"]
